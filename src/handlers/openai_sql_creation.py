import os
from datetime import datetime
import random
import re
from handlers.openai_explain_code import CodeExplain
from handlers.openai_handler import OpenAIApiHandler

class SQLCodeCreation(OpenAIApiHandler):
    def __init__(self, additionalComments: str):
        super().__init__()
        self.additionalComments = additionalComments

    def format_sql_answer(input_text: str) -> str:
        """
        Formats the input text containing SQL, introduction, explanation, and summary in a specific way.
        
        :param input_text: The input text with SQL and its description
        :return: The formatted text
        """
        
        # Find the SQL query enclosed in triple backticks
        sql_match = re.search(r'```(?:SQL|sql)?\s*(.*?)\s*```', input_text, re.DOTALL)
        sql_query = sql_match.group(1).strip()
        
        # Reformat SQL with 'sql' after the triple backticks
        formatted_sql = f"```sql\n{sql_query}\n```"
        
        # Remove the original SQL part (including backticks) from the input
        clean_text = re.sub(r'```(?:SQL|sql)?\s*.*?\s*```', '', input_text, flags=re.DOTALL).strip()
        
        # Replace 'Summary:' with an empty string, if present
        clean_text = re.sub(r'Summary:', '', clean_text, flags=re.IGNORECASE).strip()
        
        # Concatenate all the parts together without a newline character between the intro text and the triple backticks
        result = f"{clean_text} {formatted_sql}"
        
        return result

    def extract_query_components(self,input_text: str):
        # Regular expression pattern to match the query description
        query_desc_pattern = re.compile(r'\d+\.\s*\*\*Query:\s*(.*?)\s*\*\*', re.MULTILINE)
        
        # Regular expression pattern to match the SQL markdown code
        sql_code_pattern = re.compile(r'```sql(.*?)```', re.MULTILINE | re.DOTALL)
        
        # Find the query description match
        query_desc_match = query_desc_pattern.search(input_text)
        query_desc = query_desc_match.group(1).strip() if query_desc_match else None
        
        # Find the SQL markdown code match
        sql_code_match = sql_code_pattern.search(input_text)
        sql_code = sql_code_match.group(1).strip() if sql_code_match else None
        
        return query_desc, f'```sql\n{sql_code}\n```'

    def split_input_into_sections(self,text: str):
        # Regular expression pattern to match each query section
        query_pattern = re.compile(r'\d+\.\s*\*\*Query:[\s\S]*?(?=^\d+\.\s*\*\*Query:|\Z)', re.MULTILINE)
        
        # Find all matches for the pattern in the input text
        queries = query_pattern.findall(text)
        
        # Get the first section which contains the tables by splitting the input text at the first query
        tables_section = text.split(queries[0])[0].strip()
        
        # Cleanup the queries by stripping unnecessary leading/trailing whitespaces
        cleaned_queries = [query.strip() for query in queries]
        
        return tables_section, cleaned_queries[0], cleaned_queries[1], cleaned_queries[2], cleaned_queries[3], cleaned_queries[4]

    def request_new_example(self) -> str:
        """Request code example for sql using OpenAI API."""
        numberTables = random.randint(3,5)
        prompt = f"Create a new example with a different topic, use {numberTables} tables now. Create 5 queries based on these tables. Make sure to add CTEs into each query example. "
        if self.additionalComments:
            prompt += "Also, I need you to consider adding " + self.additionalComments + " to each query example."
        print(prompt)
        messages = [
            {
                "role":"system",
                "content":"I want to train a chatbot to perform the following tasks:\nApplied MySQL's SQL.\n\nPractical implementation and usage of MySQL in real-world scenarios. This means the use of MySQL commands and queries to solve specific data-related problems in an actual database or application.\n\nYou can describe the database tables to the chatbot or inquire about how to perform a specific task using a scenario generated by the chatbot. This could involve prompts such as retrieving specific data from a database, performing data analysis, creating and modifying database tables, joining data from multiple tables, filtering records based on certain conditions, and more."
            },
            {
                "role":"user",
                "content":"Create a new example with a different topic, use 4 tables now. Make sure to add CTEs and practical implementation and utilization of SQL functions in real-world scenarios, in particular, I want you to use the CUME_DIST Window Function for each query.\nCreate 5 queries based on this and make sure to use the CUME_DIST Window Function for each query."
            },
            {
                "role":"assistant",
                "content":"# Book(book_id, title, author_id, genre, price)\n# Author(author_id, author_name, country)\n# Customer(customer_id, customer_name, city, state)\n# BookReview(review_id, book_id, customer_id, rating, review_text)\n **Query: Calculate the cumulative distribution of customer ratings for books**\n```sql\\nWITH BookRatings AS (\\n    SELECT b.title, br.rating\\n    FROM books b\\n    JOIN book_reviews br ON b.book_id = br.book_id\\n)\\nSELECT title, rating, CUME_DIST() OVER(ORDER BY rating DESC) AS cume_dist\\nFROM BookRatings;\\n```\\n\\n2. **Query: Identify books with a cumulative distribution rating below 0.4**\\n```sql\\nWITH BookRatings AS (\\n    SELECT b.title, br.rating\\n    FROM books b\\n    JOIN book_reviews br ON b.book_id = br.book_id\\n)\\nSELECT title, rating\\nFROM BookRatings\\nWHERE CUME_DIST() OVER(ORDER BY rating DESC) < 0.4;\\n```\\n\\n3. **Query: Calculate the CUME_DIST of average ratings for books within each genre**\\n```sql\\nWITH GenreAvgRatings AS (\\n    SELECT b.genre, AVG(br.rating) AS avg_rating\\n    FROM books b\\n    JOIN book_reviews br ON b.book_id = br.book_id\\n    GROUP BY b.genre\\n)\\nSELECT genre, avg_rating, CUME_DIST() OVER(ORDER BY avg_rating DESC) AS cume_dist\\nFROM GenreAvgRatings;\\n```\\n\\n4. **Query: Find the genres with a CUME_DIST above 0.6 in terms of average ratings**\\n```sql\\nWITH GenreAvgRatings AS (\\n    SELECT b.genre, AVG(br.rating) AS avg_rating\\n    FROM books b\\n    JOIN book_reviews br ON b.book_id = br.book_id\\n    GROUP BY b.genre\\n)\\nSELECT genre, avg_rating\\nFROM GenreAvgRatings\\nWHERE CUME_DIST() OVER(ORDER BY avg_rating DESC) > 0.6;\\n```\\n\\n5. **Query: Calculate the CUME_DIST of customer review counts for books**\\n```sql\\nWITH BookReviewCounts AS (\\n    SELECT b.title, COUNT(br.review_id) AS review_count\\n    FROM books b\\n    LEFT JOIN book_reviews br ON b.book_id = br.book_id\\n    GROUP BY b.title\\n)\\nSELECT title, review_count, CUME_DIST() OVER(ORDER BY review_count DESC) AS cume_dist\\nFROM BookReviewCounts;\\n```\""            },
            {
                "role":"user",
                "content":prompt
            }
        ]
        return self.generate_chat_completion(messages)

    def format_first_prompt(self, query:str) -> str:

        messages = [
            {
                "role":"system",
                "content":"You are an AI assistant and will aid me to format information. I will give you several tables and a query as input:\n{tables}\n{query}\nI want you to output the following:\n\"I have several tables and I would like to gather some information about them. Please help me write queries to gather this data, here are the table schemas that I have:\n{tables}\n\n\"First, I want to\\\" + {query}\""
            },
            {
                "role":"user",
                "content":"Sure, here's an example using three tables:\n\n# Employee (employee_id, name, department_id, salary)\n# Department (department_id, name, location_id)\n# Location (location_id, city, state)\nCalculate the average salary for each department"
            },
            {
                "role":"assistant",
                "content":"I have several tables and I would like to gather some information about them. Please help me write queries to gather this data, here are the table schemas that I have:\n# Employee (employee_id, name, department_id, salary)\n# Department (department_id, name, location_id)\n# Location (location_id, city, state)\n\nFirst, I want to calculate the average salary for each department, please create a query for this."
            },
            {
                "role":"user",
                "content":query
            }
            ]

        return self.generate_chat_completion(messages)
